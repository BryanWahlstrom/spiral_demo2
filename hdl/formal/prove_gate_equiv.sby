#----------------------------------------------------------------------
#  prove_gate_equiv.sby  –  RTL ↔ behavioural equivalence proof
#  Scope   : reflex_kernel_gate.v  vs.  gate_golden.v
#  Target  : trusted_hw == trusted_sw  within 2 cycles
#  Engines : smtbmc (Yices default)  ·  works on any SymbiYosys ≥ 1.0.4
#----------------------------------------------------------------------

[options]
mode  prove
depth 2                 # 1 cycle of latency is enough; keep depth=2 for safety
expect-proved 1

[engines]
smtbmc yices

[script]
# ---- bring in the two source files ----------------------------------
read -sv rtl/reflex_kernel_gate.v
read -sv rtl/gate_golden.v

# ---- inline wrapper that feeds *identical* inputs to both instances --
read -verilog - <<'EOV'
/* autogenerated wrapper for formal equivalence */
module equiv_wrapper;
    /* --------- unconstrained stimuli (all *anyseq*) ---------------- */
    reg         clk          = 0;
    reg         rst_n        = 1'b1;

    reg  [63:0] packed_const = 64'hx;
    reg  [31:0] dt_us        = 32'hx;
    reg  [15:0] dphi_e4      = 16'hx;
    reg  [15:0] qsfs_e4      = 16'hx;

    /* keep clock toggling for depth-N BMC */
    always #1 clk = ~clk;

    /* --------- DUT instance --------------------------------------- */
    wire trusted_hw;
    reflex_kernel_gate dut (
        .clk           (clk),
        .rst_n         (rst_n),
        .packed_const  (packed_const),
        .dt_us         (dt_us),
        .dphi_e4       (dphi_e4),
        .qsfs_e4       (qsfs_e4),
        .tse_e4        (16'd0),   // unused in equivalence check
        .cmd_e4        (16'd0),
        .s_e4          (16'd0),
        .ds_e4         (16'd0),
        .trusted_hw    (trusted_hw),
        .reflex_trigger( )        // left open
    );

    /* --------- behavioural golden reference ----------------------- */
    wire trusted_sw;
    gate_golden ref (
        .packed_const (packed_const),
        .dt_us        (dt_us),
        .dphi_e4      (dphi_e4),
        .qsfs_e4      (qsfs_e4),
        .trusted_sw   (trusted_sw)
    );

    /* --------- ASSERT: outputs must match at every step ----------- */
    /*  Formal tool proves the assertion under every possible input.  */
    always @* assert (trusted_hw == trusted_sw);
endmodule
EOV

# -- build formal hierarchy on the wrapper
hierarchy -top equiv_wrapper
prep -nordff                  # keep flip-flops explicit (no dff extraction)
check                         # sanity checks
prove -all                    # run selected engine(s)

[files]
rtl/reflex_kernel_gate.v
rtl/gate_golden.v

